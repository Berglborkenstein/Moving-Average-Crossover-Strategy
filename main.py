import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import backtest

ticker_name = input("Enter the ticker of the stock you want to look at. ")
time_period = input("What time period do you want to look at? Give in terms of mo or y. ")
ticker = yf.Ticker(ticker_name)
history_values = ticker.history(period = time_period, interval = '1d')

#Extracts the Close values for calculation
close = history_values['Close']

#Calculates the moving averages
short_avg = close.ewm(span = 10, adjust = False).mean()
long_avg = close.ewm(span = 70, adjust = False).mean()

#Includes the moving averages within the dataframe
history_values['Short'] = short_avg
history_values['Long'] = long_avg

#Generates a buy/sell signal
def buy_sell(data):
    buy_list = []
    sell_list = []

    for i in range(len(data)):
        if i == 0:
            buy_list.append(np.nan)
            sell_list.append(np.nan)
        else:
            # Golden cross: Short crosses above Long -> Buy
            if data['Short'].iloc[i-1] < data['Long'].iloc[i-1] and data['Short'].iloc[i] > data['Long'].iloc[i]:
                sell_list.append(data['Close'].iloc[i])
                buy_list.append(np.nan)

            # Death cross: Short crosses below Long -> Sell
            elif data['Short'].iloc[i-1] > data['Long'].iloc[i-1] and data['Short'].iloc[i] < data['Long'].iloc[i]:
                sell_list.append(np.nan)
                buy_list.append(data['Close'].iloc[i])

            # If no crossing, no signal added
            else:
                buy_list.append(np.nan)
                sell_list.append(np.nan)

    return sell_list, buy_list

# Adds the buy and sell signals back into the dataframe
sell,buy = buy_sell(history_values)
history_values['Sell'] = sell
history_values['Buy'] = buy

# Displays the graph with the buy and sell signals marked
plt.figure(figsize=(12.2,4.5))
plt.plot(history_values['Close'], label = 'Close Price')
#plt.plot(history_values['Long'], label = 'Long Average')
#plt.plot(history_values['Short'], label = 'Short Average')
plt.plot(history_values['Sell'], marker = 'v', label = 'Sell', color = 'Red')
plt.plot(history_values['Buy'], marker = '^', label = 'Buy', color = 'Purple')
plt.legend()
plt.savefig('plot.png')

#Calculates the profit that is generated by this strategy
profit = 0
for i in range(len(sell)):
    if type(sell[i]) == np.float64:
        profit += sell[i]
    elif type(buy[i]) == np.float64:
        profit -= buy[i]

backtest.performance_metrics(backtest.calculate_returns(history_values))
